import asyncio
from datetime import datetime, time, timedelta
from aiogram import Bot, Dispatcher
import pytz
from bot.config import TELEGRAM_TOKEN
from bot.routers import router


async def scheduled_evening_check(bot: Bot):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 22:30 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
    timezone = pytz.timezone('Europe/Moscow')
    while True:
        now = datetime.now(timezone)
        target_time = time(22, 30)

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π 22:30
        if now.time() > target_time:
            next_day = now.date() + timedelta(days=1)
            next_target = datetime.combine(next_day, target_time)
        else:
            next_target = datetime.combine(now.date(), target_time)

        wait_seconds = (next_target - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        try:
            from bot.check_updates import check_updates
            await check_updates(bot)
            print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ {datetime.now(timezone).strftime('%d.%m.%Y %H:%M')}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    asyncio.create_task(scheduled_evening_check(bot))

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 22:30)...")
    asyncio.run(main())