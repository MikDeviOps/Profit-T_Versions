import asyncio
from datetime import datetime, time, timedelta, timezone
from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramNetworkError
from bot.config import TELEGRAM_TOKEN, CHAT_ID
from bot.routers import router
from aiogram.utils.formatting import Text, Bold, Italic

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CHECK_TIME = time(22, 30)  # –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
MOSCOW_TZ = timezone(timedelta(hours=3))  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
UPDATE_INTERVAL = 3600  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (1 —á–∞—Å)
MAX_RETRIES = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
RETRY_DELAY = 5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)


class StatusMessage:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.message_id = None
        self.last_check_time = None

    async def update_status(self, retry_count=0):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            now = datetime.now(MOSCOW_TZ)

            if now.time() > CHECK_TIME:
                next_check = datetime.combine(now.date() + timedelta(days=1), CHECK_TIME, tzinfo=MOSCOW_TZ)
            else:
                next_check = datetime.combine(now.date(), CHECK_TIME, tzinfo=MOSCOW_TZ)

            time_left = next_check - now
            hours, remainder = divmod(time_left.seconds, 3600)
            minutes = remainder // 60

            text = Text(
                Bold("ü§ñ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ü—Ä–æ—Ñ–∏-–¢\n"),
                f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {self.last_check_time or '–µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å'}\n",
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑: ",
                Bold(f"{time_left.days}–¥ {hours}—á {minutes}–º\n"),
                f"üïí –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ",
                Italic(next_check.strftime('%d.%m.%Y –≤ %H:%M')),
                "\n\n",
                Italic("(—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
            )

            if self.message_id:
                await self.bot.edit_message_text(
                    chat_id=CHAT_ID,
                    message_id=self.message_id,
                    text=text.as_markdown(),
                    parse_mode="Markdown"
                )
            else:
                msg = await self.bot.send_message(
                    CHAT_ID,
                    text.as_markdown(),
                    parse_mode="Markdown"
                )
                self.message_id = msg.message_id

        except TelegramNetworkError as e:
            if retry_count < MAX_RETRIES:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{MAX_RETRIES}): {e}")
                await asyncio.sleep(RETRY_DELAY)
                return await self.update_status(retry_count + 1)
            raise
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")


async def safe_check_updates(bot: Bot):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    for attempt in range(MAX_RETRIES):
        try:
            from bot.check_updates import check_updates
            await check_updates(bot)
            return True
        except TelegramNetworkError as e:
            wait_time = (attempt + 1) * RETRY_DELAY
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES}): {e}")
            await asyncio.sleep(wait_time)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            await bot.send_message(CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)[:1000]}")
            return False
    return False


async def scheduled_evening_check(bot: Bot, status_msg: StatusMessage):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    while True:
        try:
            now = datetime.now(MOSCOW_TZ)

            if now.time() > CHECK_TIME:
                next_check = datetime.combine(now.date() + timedelta(days=1), CHECK_TIME, tzinfo=MOSCOW_TZ)
            else:
                next_check = datetime.combine(now.date(), CHECK_TIME, tzinfo=MOSCOW_TZ)

            wait_seconds = (next_check - now).total_seconds()

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            while wait_seconds > 0:
                await status_msg.update_status()
                sleep_time = min(UPDATE_INTERVAL, wait_seconds)
                await asyncio.sleep(sleep_time)
                wait_seconds -= sleep_time

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            status_msg.last_check_time = datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M')
            if await safe_check_updates(bot):
                print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ {status_msg.last_check_time}")
            await status_msg.update_status()

        except Exception as e:
            print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ scheduled_evening_check: {e}")
            await asyncio.sleep(RETRY_DELAY * 2)


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∑–∞–ø—É—Å–∫–∞"""
    retry_count = 0
    while retry_count < MAX_RETRIES:
        try:
            bot = Bot(token=TELEGRAM_TOKEN)
            dp = Dispatcher()
            dp.include_router(router)

            status_msg = StatusMessage(bot)
            await status_msg.update_status()

            asyncio.create_task(scheduled_evening_check(bot, status_msg))

            await dp.start_polling(bot)
            break

        except TelegramNetworkError as e:
            retry_count += 1
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{MAX_RETRIES}): {e}")
            await asyncio.sleep(RETRY_DELAY)
        except Exception as e:
            print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            break
        finally:
            if 'bot' in locals():
                await bot.session.close()


if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫...")
    asyncio.run(main())