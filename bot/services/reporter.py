from datetime import datetime
from pathlib import Path
from bot.config import BotData, CHAT_ID, MAX_FILES_IN_SUMMARY
from bot.keyboards import create_main_keyboard


async def prepare_data(changes: list):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    BotData.current_authors_data = {}
    BotData.latest_changes = changes[-MAX_FILES_IN_SUMMARY:]

    for change in changes:
        author = change['author']
        if author not in BotData.current_authors_data:
            BotData.current_authors_data[author] = []
        BotData.current_authors_data[author].append(change)


async def create_author_report(author: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≤—Ç–æ—Ä—É"""
    if author not in BotData.current_authors_data:
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ—Ä–µ {author}"

    changes = BotData.current_authors_data[author]
    report_lines = [
        f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author}",
        f"üìå <b>–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b> {len(changes)}",
        f"üïí <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        ""
    ]

    for change in sorted(changes, key=lambda x: (x['date'], x['time']), reverse=True):
        file_path = Path(change['file'])
        report_lines.extend([
            f"üìÖ {change['date']} {change['time']}",
            f"üìÅ {file_path.parent}/<code>{file_path.name}</code> (v.{change['version']})",
            *[f"‚Ä¢ {desc}" for desc in change['description'] if desc.strip()],
            ""
        ])

    return "\n".join(report_lines)


async def send_report(bot, changes: list, filename: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
    await prepare_data(changes)

    if not changes:
        await bot.send_message(
            CHAT_ID,
            "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö",
            reply_markup=create_main_keyboard()
        )
        return

    unique_files = list({
        f"{Path(change['file']).parent}/<code>{Path(change['file']).name}</code> (v.{change['version']})"
        for change in BotData.latest_changes
    })

    message = [
        f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</b> ({filename})",
        f"üïí <b>–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        "",
        "<b>–î–æ—Ä–∞–±–æ—Ç–∫–∏:</b>",
        *unique_files[:MAX_FILES_IN_SUMMARY],
        "",
        f"üë• <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:</b> {len(BotData.current_authors_data)}"
    ]

    if len(unique_files) > MAX_FILES_IN_SUMMARY:
        message.insert(-2, f"\n...–∏ –µ—â—ë {len(unique_files) - MAX_FILES_IN_SUMMARY} –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    await bot.send_message(
        CHAT_ID,
        "\n".join(message),
        parse_mode='HTML',
        reply_markup=create_main_keyboard()
    )